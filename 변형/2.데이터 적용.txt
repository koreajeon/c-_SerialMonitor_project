// DeviceSerial.cs


using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using LiveCharts;
using LiveCharts.Wpf;
using System;
using System.Diagnostics;
using System.IO.Ports;
using System.Threading;
using System.Windows.Input;
using System.Windows.Threading;

namespace SerialMonitor
{
    partial class DeviceSerial : ObservableObject
    {

        public SeriesCollection SeriesCollection { get; set; }
        SerialPort serialPort = new SerialPort();

        private string receiveData = "";
        public string ReceiveData
        {
            get => receiveData;
            set => SetProperty(ref receiveData, value);
        }

        public RelayCommand OpenButtonCommand { get; }
        public RelayCommand CloseButtonCommand { get; }


        public DeviceSerial()
        {
            SeriesCollection = new SeriesCollection
            {
                new LineSeries
                {
                    Title ="Series 1",
                    Values = new ChartValues<double> { 1,2,3,4,5}
                },
                new LineSeries
                {
                    Title="Series 2",
                    Values= new ChartValues<double>{10,9,8,7,6,5,4,3,2,1}
                }
            };
            Thread.Sleep(500);
            //Connect(1);

            OpenButtonCommand = new RelayCommand(ConnectButton);
            CloseButtonCommand = new RelayCommand(CloseButton);
        }

        private void ConnectButton()
        {
            Connect(3);
        }
        private void CloseButton()
        {
            Close();
        }

        public bool Connect(int portName, int baudRate = (int)9600, int DataBits = (int)8, Parity parity = Parity.None, StopBits stopBits = StopBits.One)
        {
            if (serialPort.IsOpen == false)
            {
                serialPort.PortName = "COM" + portName.ToString();
                serialPort.BaudRate = baudRate;
                serialPort.Parity = parity;
                serialPort.StopBits = stopBits;
                serialPort.DataBits = DataBits;


                serialPort.Open();
                serialPort.DataReceived += new SerialDataReceivedEventHandler(DataReceiveHandler);

            }


            return true;
        }

        private void DataReceiveHandler(object sender, SerialDataReceivedEventArgs e)
        {
            SerialPort serialPort = (SerialPort)sender;
            string temp = serialPort.ReadLine();

            if (String.IsNullOrEmpty(temp) == false)
            {
                ReceiveData = temp.Trim().ToString();
                var values = Convert.ToDouble(ReceiveData);
                SeriesCollection[0].Values.Add(values);
                //Debug.WriteLine(ReceiveData);
            }

        }

        public bool Close()
        {
            serialPort.DataReceived -= new SerialDataReceivedEventHandler(DataReceiveHandler);

            serialPort.Close();

            return true;
        }

    }
}

-----------------------------------------
//MainWindow.xaml

<Window x:Class="SerialMonitor.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:SerialMonitor"
        xmlns:lvc="clr-namespace:LiveCharts.Wpf;assembly=LiveCharts.Wpf"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">

    <Window.DataContext>
        <local:DeviceSerial/>
    </Window.DataContext>
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="300"/>
            <ColumnDefinition Width="400"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="300"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid Grid.Row="0" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center">
            <TextBlock  Text="{Binding ReceiveData, Mode=OneWay}" FontSize="50" Margin="153,7,0,0" HorizontalAlignment="Left" VerticalAlignment="Top"/>

        </Grid>


        <Grid Grid.Row="1" Grid.Column="0" >

            <Button Content="OPEN" 
                    Command="{Binding OpenButtonCommand}"
                    HorizontalAlignment="Left" Height="61" 
                    Margin="2,13,0,0" VerticalAlignment="Top" Width="146" />

            <Button Content="CLOSE" 
                    Command="{Binding CloseButtonCommand}"
                    
                    HorizontalAlignment="Left" Height="62" Margin="153,12,0,0" VerticalAlignment="Top" Width="146" />

        </Grid>


        <Grid Grid.Row="0" Grid.Column="1"
            HorizontalAlignment="Left" Height="305" Margin="0,0,0,0" VerticalAlignment="Top" Width="348">
            <lvc:CartesianChart Series="{Binding SeriesCollection}">


            </lvc:CartesianChart>
        </Grid>



    </Grid>
</Window>

--------------------------------
//MainWindow.xaml.cs

using CommunityToolkit.Mvvm.ComponentModel;
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Threading;

namespace SerialMonitor
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        //DeviceSerial arduinoSerial;


        public MainWindow()
        {
            InitializeComponent();
            //arduinoSerial = new DeviceSerial();




        }

    }
}